#---
#Delete everything
rm(list = ls())
#Rewrite this to a proper working direction
options(stringsAsFactors = FALSE)
workingDirectory <- "C:\\Research\\Sovereign_interconnectedness\\Refactored"
setwd(workingDirectory)
#Call packages
pacman::p_load(stringi, chron, reshape2, plyr, ggrepel, directlabels, tidyr,
dplyr, RODBC, ggplot2, grid, gridExtra, xlsx, YieldCurve, readxl,
forecast, mtest, vars, sqldf, qgraph, fUnitRoots, urca, aod, zoo,
tseries, gtools, stringr, tbl2xts, crayon, Cairo, data.table,
reticulate, readr, egcm, pastecs, scales, vars, ggpubr)
#---
#Input parameters
usage <- "excel"
frequency <- "daily" #daily weekly monthly
input <- c("all","node")
nodeIdent <- "USA_B_1"
typeOfCausalityTest <- 'TY'
confidenceLevel <- 0.01
typeOfUnitRootTest <- "ADF"
typeOfInformationCriterion <- "AIC" #AIC, HQ SC, FPE
grangerPValue <- 1/1000
timeSubset <- "fix"
windowSize <- 750
windowShift <- 5
startDate <- as.Date('2004-07-01')
endDate <- as.Date('2019-12-31')
#---
#Get data
source("rawDataFormatting.R")
#---
#Calculate betas
source("betaCalculation.R")
maxDifferenceOrder<-timeSeriesDifferentiator(globalBetas, typeOfUnitRootTest)
source("stationarityFunctions.R")
maxDifferenceOrder<-timeSeriesDifferentiator(globalBetas, typeOfUnitRootTest)
computeConnectionMatrix<-function(globalBetas,lag, varType)
computeConnectionMatrix<-function(globalBetas,lag, varType){
#varType = 'both'
firstVarResult<-VARselect(globalBetas, lag=7, type = varType ,typeOfInformationCriterion)
if(typeOfInformationCriterion=="AIC")
{
varOrder<- varResult$selection[1]
}else if (typeOfInformationCriterion=="HQ")
{
varOrder<- varResult$selection[2]
}else if (typeOfInformationCriterion=="SC")
{
varOrder<- varResult$selection[3]
}else if (typeOfInformationCriterion=="FPE")
{
varOrder<- varResult$selection[4]
}else
{
print("Incorrect information Criterion!")
}
secondVarResult<-VAR(globalBetas, p=varOrder, type = varType)
if (1/roots(secondVarResult)[[2]]>1){
cat(green("Stability analysis passes!\n"))
} else{
cat(yellow("Warning: Stability analysis did not pass!\n"))
}
thirdVarResult<-VAR(globalBetas,p=(varOrder+maxDifferenceOrder), type=varType)
#var_results_1$varresult
#summary(var_results_1)
connectednessMatrix<-as.data.frame(matrix(data= NA,
nrow = ncol(globalBetas),
ncol = ncol(globalBetas)))
for (i in 1:nrow(connectednessMatrix))
{
for (j in 1:ncol(connectednessMatrix))
{
causalityMeasure<-wald.test(b=coef(thirdVarResult$varresult[[i]]),
Sigma = vcov(thirdVarResult$varresult[[i]]),
Terms = c(j,j+(1:varOrder)*nrow(currency)*3))
connectednessMatrix[j,i]<-causalityMeasure$result$chi2[3]
}}
colnames(connectednessMatrix)<-colnames(globalBetas)
rownames(connectednessMatrix)<-colnames(globalBetas)
return(connectednessMatrix)}
connectednessMatrix <- computeConnectionMatrix(globalBetas,7, 'both')
connectednessMatrix <- computeConnectionMatrix(globalBetas,7, 'both')
connectednessMatrix
typeOfInformationCriterion
lag=7
varType = 'both'
firstVarResult<-VARselect(globalBetas, lag, type = varType ,typeOfInformationCriterion)
firstVarResult
firstVarResult<-VARselect(globalBetas, lag, type = varType)
if(typeOfInformationCriterion=="AIC")
{
varOrder<- firstVarResult$selection[1]
}else if (typeOfInformationCriterion=="HQ")
{
varOrder<- firstVarResult$selection[2]
}else if (typeOfInformationCriterion=="SC")
{
varOrder<- firstVarResult$selection[3]
}else if (typeOfInformationCriterion=="FPE")
{
varOrder<- firstVarResult$selection[4]
}else
{
print("Incorrect information Criterion!")
}
varOrder
secondVarResult<-VAR(globalBetas, p=varOrder, type = varType)
if (1/roots(secondVarResult)[[2]]>1){
cat(green("Stability analysis passes!\n"))
} else{
cat(yellow("Warning: Stability analysis did not pass!\n"))
}
thirdVarResult<-VAR(globalBetas,p=(varOrder+maxDifferenceOrder), type=varType)
connectednessMatrix<-as.data.frame(matrix(data= NA,
nrow = ncol(globalBetas),
ncol = ncol(globalBetas)))
for (i in 1:nrow(connectednessMatrix))
{
for (j in 1:ncol(connectednessMatrix))
{
causalityMeasure<-wald.test(b=coef(thirdVarResult$varresult[[i]]),
Sigma = vcov(thirdVarResult$varresult[[i]]),
Terms = c(j,j+(1:varOrder)*nrow(currency)*3))
connectednessMatrix[j,i]<-causalityMeasure$result$chi2[3]
}}
computeConnectionMatrix<-function(globalBetas,lag, varType,typeOfInformationCriterion){
firstVarResult<-VARselect(globalBetas, lag, type = varType)
if(typeOfInformationCriterion=="AIC")
{
varOrder<- firstVarResult$selection[1]
}else if (typeOfInformationCriterion=="HQ")
{
varOrder<- firstVarResult$selection[2]
}else if (typeOfInformationCriterion=="SC")
{
varOrder<- firstVarResult$selection[3]
}else if (typeOfInformationCriterion=="FPE")
{
varOrder<- firstVarResult$selection[4]
}else
{
print("Incorrect information Criterion!")
}
secondVarResult<-VAR(globalBetas, p=varOrder, type = varType)
if (1/roots(secondVarResult)[[2]]>1){
cat(green("Stability analysis passes!\n"))
} else{
cat(yellow("Warning: Stability analysis did not pass!\n"))
}
thirdVarResult<-VAR(globalBetas,p=(varOrder+maxDifferenceOrder), type=varType)
#var_results_1$varresult
#summary(var_results_1)
connectednessMatrix<-as.data.frame(matrix(data= NA,
nrow = ncol(globalBetas),
ncol = ncol(globalBetas)))
for (i in 1:nrow(connectednessMatrix))
{
for (j in 1:ncol(connectednessMatrix))
{
causalityMeasure<-wald.test(b=coef(thirdVarResult$varresult[[i]]),
Sigma = vcov(thirdVarResult$varresult[[i]]),
Terms = c(j,j+(1:varOrder)*nrow(currency)*3))
connectednessMatrix[j,i]<-causalityMeasure$result$chi2[3]
}}
colnames(connectednessMatrix)<-colnames(globalBetas)
rownames(connectednessMatrix)<-colnames(globalBetas)
return(connectednessMatrix)}
connectednessMatrix <- computeConnectionMatrix(globalBetas,7, 'both',typeOfInformationCriterion)
View(connectednessMatrix)
edgeCounts  <- as.matrix(edgeCounter)
edgeCounts  <- as.matrix(connectednessMatrix)
diag(edgeCounts)<-NA
edgeCounts <- ifelse(abs(edgeCounts) <= ((grangerPValue)), 1, 0)
diag(edgeCounts)<-0
groups1   = list(1:((ncol(edgeCounts))/3),
((ncol(edgeCounts))/3+1):(((ncol(edge_counter))/3)*2),
((((ncol(edgeCounts))/3)*2)+1):(ncol(edge_counter)))
groups1   = list(1:((ncol(edgeCounts))/3),
((ncol(edgeCounts))/3+1):(((ncol(edgeCounts))/3)*2),
((((ncol(edgeCounts))/3)*2)+1):(ncol(edgeCounts)))
View(groups1)
betaGroups   = list(1:((ncol(edgeCounts))/3),
((ncol(edgeCounts))/3+1):(((ncol(edgeCounts))/3)*2),
((((ncol(edgeCounts))/3)*2)+1):(ncol(edgeCounts)))
allEdges<-sum(edgeCounts)
outgoingEdges<-as.data.frame(apply(edgeCounts, 1,sum))
incomingEdges<-as.data.frame(apply(edgeCounts, 2,sum))
betaGroups   = list(1:((ncol(edgeCounts))/3),
((ncol(edgeCounts))/3+1):(((ncol(edgeCounts))/3)*2),
((((ncol(edgeCounts))/3)*2)+1):(ncol(edgeCounts)))
allEdges<-sum(edgeCounts)
outgoingEdges<-as.data.frame(apply(edgeCounts, 1,sum))
outgoingEdges
edgeCounts
rownames(outgoingEdgesByNodes)<-paste0(rownames(outgoingEdgesByNodes),"_outgoing")
outgoingEdgesByNodes<-as.data.frame(apply(edgeCounts, 1,sum))
incomingEdgesByNodes<-as.data.frame(apply(edgeCounts, 2,sum))
rownames(outgoingEdgesByNodes)<-paste0(rownames(outgoingEdgesByNodes),"_outgoing")
rownames(incomingEdgesByNodes)<-paste0(rownames(incomingEdgesByNodes),"_incoming")
outgoingEdges
rownames(outgoingEdgesByNodes)<-paste0(rownames(outgoingEdgesByNodes),"_outgoing")
rownames(incomingEdgesByNodes)<-paste0(rownames(incomingEdgesByNodes),"_incoming")
outgoingEdges
outgoingEdgesByNodes
allEdges<-sum(edgeCounts)
outgoingEdgesByNodes<-as.data.frame(apply(edgeCounts, 1,sum))
incomingEdgesByNodes<-as.data.frame(apply(edgeCounts, 2,sum))
rownames(outgoingEdgesByNodes)<-paste0(rownames(outgoingEdgesByNodes),"_outgoing")
rownames(incomingEdgesByNodes)<-paste0(rownames(incomingEdgesByNodes),"_incoming")
outgoingEdgesByNodes
node_counter<-outgoingEdgesByNodes+incomingEdgesByNodes
node_counter
rownames(outgoingEdgesByNodes)<-paste0(rownames(outgoingEdgesByNodes),"_outgoing")
rownames(incomingEdgesByNodes)<-paste0(rownames(incomingEdgesByNodes),"_incoming")
rownames(edgeCountsByNodes)<-paste0(rownames(edgeCountsByNodes),"_sum")
edgeCountsByNodes<-outgoingEdgesByNodes+incomingEdgesByNodes
rownames(outgoingEdgesByNodes)<-paste0(rownames(outgoingEdgesByNodes),"_outgoing")
rownames(incomingEdgesByNodes)<-paste0(rownames(incomingEdgesByNodes),"_incoming")
rownames(edgeCountsByNodes)<-paste0(rownames(edgeCountsByNodes),"_sum")
edgeCountsByNodes
allEdges<-sum(edgeCounts)
outgoingEdgesByNodes<-as.data.frame(apply(edgeCounts, 1,sum))
incomingEdgesByNodes<-as.data.frame(apply(edgeCounts, 2,sum))
edgeCountsByNodes<-outgoingEdgesByNodes+incomingEdgesByNodes
rownames(outgoingEdgesByNodes)<-paste0(rownames(outgoingEdgesByNodes),"_outgoing")
rownames(incomingEdgesByNodes)<-paste0(rownames(incomingEdgesByNodes),"_incoming")
rownames(edgeCountsByNodes)<-paste0(rownames(edgeCountsByNodes),"_sum")
edgeCountsByNodes
beta1Edges<-sum(edgeCounts[unlist(betaGroups[1]),unlist(betaGroups[1])])
beta1Edges
edgeCounts[unlist(betaGroups[1]),unlist(betaGroups[1])]
L1<-edgeCounts[unlist(betaGroups[1]),unlist(betaGroups[1])]
View(L1)
levelSubNetwork<-edgeCounts[unlist(betaGroups[1]),unlist(betaGroups[1])]
levelEdgesSum<-sum(edgeCounts[unlist(betaGroups[1]),unlist(betaGroups[1])])
inner_edge_counter_L1<-as.data.frame(apply(levelSubNetwork, 1,sum))
inner_edge_counter_L1
inner_edge_counter_L1<-sort(inner_edge_counter_L1$`apply(L1, 1, sum)`,decreasing = TRUE)
inner_edge_counter_L1<-sort(inner_edge_counter_L1$`apply(L1, 1, sum)`,decreasing = TRUE)
inner_edge_counter_L1
inner_edge_counter_L1<-as.data.frame(apply(levelSubNetwork, 1,sum))
inner_edge_counter_L1<-sort(inner_edge_counter_L1$`apply(L1, 1, sum)`,decreasing = TRUE)
inner_edge_counter_L1
incomingLevelEdgesSum<-as.data.frame(apply(levelSubNetwork, 1,sum))
incomingLevelEdges<-as.data.frame(apply(levelSubNetwork, 1,sum))
incomingLevelEdges
colnames(incomingLevelEdges) <- 'numberOfEdges'
incomingLevelEdges
incomingLevelEdges<-sort(incomingLevelEdges$numberOfEdges,decreasing = TRUE)
incomingLevelEdges
incomingLevelEdges<-as.data.frame(apply(levelSubNetwork, 1,sum))
colnames(incomingLevelEdges) <- 'numberOfEdges'
sort(incomingLevelEdges$numberOfEdges,decreasing = TRUE)
sort(incomingLevelEdges)
sort(incomingLevelEdges[incomingLevelEdges$numberOfEdges,decreasing = TRUE])
sort([incomingLevelEdges$numberOfEdges,decreasing = TRUE)
sort(incomingLevelEdges$numberOfEdges,decreasing = TRUE)
sort(incomingLevelEdges, incomingLevelEdges$numberOfEdges,decreasing = TRUE)
jjj<- sort([incomingLevelEdges$numberOfEdges,decreasing = TRUE)
jjj<- sort(incomingLevelEdges$numberOfEdges,decreasing = TRUE)
jjj<- as.data.frame(sort(incomingLevelEdges$numberOfEdges,decreasing = TRUE))
jjj
order(incomingLevelEdges$numberOfEdges)
incomingLevelEdges[order(incomingLevelEdges$numberOfEdges)]
incomingLevelEdges[order(incomingLevelEdges)]
incomingLevelEdges[order(incomingLevelEdges$numberOfEdges),]
incomingLevelEdges<-as.data.frame(apply(levelSubNetwork, 1,sum))
colnames(incomingLevelEdges) <- 'numberOfEdges'
incomingLevelEdges
incomingLevelEdges[sort(incomingLevelEdges$numberOfEdges,decreasing = TRUE),]
sort(incomingLevelEdges$numberOfEdges,decreasing = TRUE)
sort(incomingLevelEdges$numberOfEdges,decreasing = TRUE)''
incomingLevelEdges<-sort(incomingLevelEdges$numberOfEdges,decreasing = TRUE)
incomingLevelEdges<-as.data.frame(apply(levelSubNetwork, 1,sum))
colnames(incomingLevelEdges) <- 'numberOfEdges'
rowNames<-rowNames(incomingLevelEdges)
incomingLevelEdges<-as.data.frame(apply(levelSubNetwork, 1,sum))
colnames(incomingLevelEdges) <- 'numberOfEdges'
rowNames<-rowNames(incomingLevelEdges)
incomingLevelEdges<-as.data.frame(sort(incomingLevelEdges$numberOfEdges,decreasing = TRUE))
rownames(incomingLevelEdges) <- rowNames
incomingLevelEdges<-as.data.frame(apply(levelSubNetwork, 1,sum))
colnames(incomingLevelEdges) <- 'numberOfEdges'
rowNames<-rownames(incomingLevelEdges)
incomingLevelEdges<-as.data.frame(sort(incomingLevelEdges$numberOfEdges,decreasing = TRUE))
rownames(incomingLevelEdges) <- rowNames
incomingLevelEdges
incomingLevelEdges<-as.data.frame(apply(levelSubNetwork, 1,sum))
colnames(incomingLevelEdges) <- 'numberOfEdges'
rowNames<-rownames(incomingLevelEdges)
incomingLevelEdges<-as.data.frame(sort(incomingLevelEdges$numberOfEdges,decreasing = TRUE))
rownames(incomingLevelEdges) <- rowNames
colnames(incomingLevelEdges) <- 'numberOfEdges'
incomingLevelEdges
outgoingLevelEdges<-sum(edgeCounts[unlist(betaGroups[1]),unlist(betaGroups[2])])+
sum(edgeCounts[unlist(betaGroups[1]),unlist(betaGroups[3])])
outgoingLevelEdges
levelEdgesSum<-sum(edgeCounts[unlist(betaGroups[1]),unlist(betaGroups[1])])
levelEdgesSum
outgoingLevelEdges<-(edgeCounts[unlist(betaGroups[1]),unlist(betaGroups[2])])+
(edgeCounts[unlist(betaGroups[1]),unlist(betaGroups[3])])
outgoingLevelEdges
edgeCounts[unlist(betaGroups[1]),unlist(betaGroups[2])]
levelEdgesSumWithin<-sum(edgeCounts[unlist(betaGroups[1]),unlist(betaGroups[1])])
outgoingLevelEdges<-as.data.frame(apply(exLevelSubNetwork, 1,sum))
colnames(outgoingLevelEdges) <- 'numberOfEdges'
rowNames<-rownames(outgoingLevelEdges)
outgoingLevelEdges<-as.data.frame(sort(outgoingLevelEdges$numberOfEdges,decreasing = TRUE))
rownames(outgoingLevelEdges) <- rowNames
colnames(outgoingLevelEdges) <- 'numberOfEdges'
exLevelSubNetwork<-(edgeCounts[unlist(betaGroups[1]),unlist(betaGroups[2])])+
(edgeCounts[unlist(betaGroups[1]),unlist(betaGroups[3])])
outgoingLevelEdges<-as.data.frame(apply(exLevelSubNetwork, 1,sum))
colnames(outgoingLevelEdges) <- 'numberOfEdges'
rowNames<-rownames(outgoingLevelEdges)
outgoingLevelEdges<-as.data.frame(sort(outgoingLevelEdges$numberOfEdges,decreasing = TRUE))
rownames(outgoingLevelEdges) <- rowNames
colnames(outgoingLevelEdges) <- 'numberOfEdges'
outgoingLevelEdges
edgeCounts[unlist(betaGroups[1]),unlist(betaGroups[2])]
outgoingLevelEdges
edgeCounts[unlist(betaGroups[1]),unlist(betaGroups[3])]
(edgeCounts[unlist(betaGroups[1]),unlist(betaGroups[2])])+
(edgeCounts[unlist(betaGroups[1]),unlist(betaGroups[3])])
apply(exLevelSubNetwork, 1,sum)
as.data.frame(apply(exLevelSubNetwork, 1,sum))
colnames(outgoingLevelEdges) <- 'numberOfEdges'
rowNames<-rownames(outgoingLevelEdges)
sort(outgoingLevelEdges$numberOfEdges,decreasing = TRUE))
sort(incomingLevelEdges$numberOfEdges,decreasing = TRUE)
t(sort(incomingLevelEdges$numberOfEdges,decreasing = TRUE))
incomingLevelEdges[order(-incomingLevelEdges$numberOfEdges),,drop=FALSE]
incomingLevelEdges
levelSubNetwork
incomingLevelEdges
rownames(outgoingEdgesByNodes)<-paste0(rownames(outgoingEdgesByNodes),"_outgoing")
rownames(incomingEdgesByNodes)<-paste0(rownames(incomingEdgesByNodes),"_incoming")
rownames(edgeCountsByNodes)<-paste0(rownames(edgeCountsByNodes),"_sum")
levelSubNetwork<-edgeCounts[unlist(betaGroups[1]),unlist(betaGroups[1])]
levelEdgesSumWithin<-sum(edgeCounts[unlist(betaGroups[1]),unlist(betaGroups[1])])
incomingLevelEdges<-as.data.frame(apply(levelSubNetwork, 1,sum))
levelSubNetwork
apply(levelSubNetwork, 1,sum)
incomingLevelEdges<-as.data.frame(apply(levelSubNetwork, 1,sum))
incomingLevelEdges
incomingLevelEdges<-as.data.frame(apply(levelSubNetwork, 1,sum))
colnames(incomingLevelEdges) <- 'numberOfEdges'
incomingLevelEdges<-incomingLevelEdges[order(-incomingLevelEdges$numberOfEdges),,drop=FALSE]
colnames(incomingLevelEdges) <- 'numberOfEdges'
incomingLevelEdges
outgoingLevelEdges<-as.data.frame(apply(exLevelSubNetwork, 1,sum))
colnames(outgoingLevelEdges) <- 'numberOfEdges'
outgoingLevelEdges<-outgoingLevelEdges[order(-outgoingLevelEdges$numberOfEdges),,drop=FALSE]
colnames(outgoingLevelEdges) <- 'numberOfEdges'
outgoingLevelEdges
max_edges_inner<-factorial(nrow(edgeCounts[unlist(betaGroups[1]),unlist(betaGroups[1])]))/
(factorial(2)*factorial(nrow(edgeCounts[unlist(betaGroups[1]),unlist(betaGroups[1])])-2))
max_edges_inner
outgoingLevelEdges
sum(outgoingLevelEdges)
sum(incomingLevelEdgesEdges)
sum(incomingLevelEdges)
nrow(edgeCounts[unlist(betaGroups[1]),unlist(betaGroups[1])])
factorial(nrow(edgeCounts[unlist(betaGroups[1]),unlist(betaGroups[1])]))
(factorial(2)*factorial(nrow(edgeCounts[unlist(betaGroups[1]),unlist(betaGroups[1])])-2))
factorial(nrow(edgeCounts[unlist(betaGroups[1]),unlist(betaGroups[1])]))/
(factorial(2)*factorial(nrow(edgeCounts[unlist(betaGroups[1]),unlist(betaGroups[1])])-2))
edgeCounterBySubnetwork<-function(edgeCounts,betaGroups,subNetID, firstExcludedSubNetID, secondExcludedSubNetID){
subNetwork<-edgeCounts[unlist(betaGroups[subNetID]),unlist(betaGroups[subNetID])]
edgesSumWithin<-sum(edgeCounts[unlist(betaGroups[subNetID]),unlist(betaGroups[subNetID])])
incomingEdges<-as.data.frame(apply(subNetwork, 1,sum))
colnames(incomingEdges) <- 'numberOfEdges'
incomingEdges<-incomingEdges[order(-incomingEdges$numberOfEdges),,drop=FALSE]
colnames(incomingEdges) <- 'numberOfEdges'
exSubNetwork<-(edgeCounts[unlist(betaGroups[subNetID]),unlist(betaGroups[firstExcludedSubNetID])])+
(edgeCounts[unlist(betaGroups[subNetID]),unlist(betaGroups[secondExcludedSubNetID])])
outgoingEdges<-as.data.frame(apply(exSubNetwork, 1,sum))
colnames(outgoingEdges) <- 'numberOfEdges'
outgoingEdges<-outgoingEdges[order(-outgoingLevelEdges$numberOfEdges),,drop=FALSE]
colnames(outgoingdges) <- 'numberOfEdges'
resultList <- list(incomingEdges, outgoingEdges)
return (resultList)
}
incomingEdgesLevel<-edgeCounterBySubnetwork(edgeCounts,betaGroups,1, 2, 3)[[1]]
edgeCounterBySubnetwork<-function(edgeCounts,betaGroups,subNetID, firstExcludedSubNetID, secondExcludedSubNetID){
subNetwork<-edgeCounts[unlist(betaGroups[subNetID]),unlist(betaGroups[subNetID])]
edgesSumWithin<-sum(edgeCounts[unlist(betaGroups[subNetID]),unlist(betaGroups[subNetID])])
incomingEdges<-as.data.frame(apply(subNetwork, 1,sum))
colnames(incomingEdges) <- 'numberOfEdges'
incomingEdges<-incomingEdges[order(-incomingEdges$numberOfEdges),,drop=FALSE]
colnames(incomingEdges) <- 'numberOfEdges'
exSubNetwork<-(edgeCounts[unlist(betaGroups[subNetID]),unlist(betaGroups[firstExcludedSubNetID])])+
(edgeCounts[unlist(betaGroups[subNetID]),unlist(betaGroups[secondExcludedSubNetID])])
outgoingEdges<-as.data.frame(apply(exSubNetwork, 1,sum))
colnames(outgoingEdges) <- 'numberOfEdges'
outgoingEdges<-outgoingEdges[order(-outgoingLevelEdges$numberOfEdges),,drop=FALSE]
colnames(outgoingEdges) <- 'numberOfEdges'
resultList <- list(incomingEdges, outgoingEdges)
return (resultList)
}
incomingEdgesLevel<-edgeCounterBySubnetwork(edgeCounts,betaGroups,1, 2, 3)[[1]]
incomingEdgesLevel
outgoingEdgesLevel
outgoingEdgesLevel<-edgeCounterBySubnetwork(edgeCounts,betaGroups,1, 2, 3)[[2]]
outgoingEdgesLevel
edgeCounterBySubnetwork<-function(edgeCounts,betaGroups,subNetID, firstExcludedSubNetID, secondExcludedSubNetID){
subNetwork<-edgeCounts[unlist(betaGroups[subNetID]),unlist(betaGroups[subNetID])]
edgesSumWithin<-sum(edgeCounts[unlist(betaGroups[subNetID]),unlist(betaGroups[subNetID])])
incomingEdges<-as.data.frame(apply(subNetwork, 1,sum))
colnames(incomingEdges) <- 'numberOfEdges'
incomingEdges<-incomingEdges[order(-incomingEdges$numberOfEdges),,drop=FALSE]
colnames(incomingEdges) <- 'numberOfEdges'
exSubNetwork<-(edgeCounts[unlist(betaGroups[subNetID]),unlist(betaGroups[firstExcludedSubNetID])])+
(edgeCounts[unlist(betaGroups[subNetID]),unlist(betaGroups[secondExcludedSubNetID])])
outgoingEdges<-as.data.frame(apply(exSubNetwork, 1,sum))
colnames(outgoingEdges) <- 'numberOfEdges'
outgoingEdges<-outgoingEdges[order(-outgoingEdges$numberOfEdges),,drop=FALSE]
colnames(outgoingEdges) <- 'numberOfEdges'
resultList <- list(incomingEdges, outgoingEdges)
return (resultList)
}
incomingEdgesLevel<-edgeCounterBySubnetwork(edgeCounts,betaGroups,1, 2, 3)[[1]]
outgoingEdgesLevel<-edgeCounterBySubnetwork(edgeCounts,betaGroups,1, 2, 3)[[2]]
outgoingEdgesLevel
incomingEdgesLevel<-edgeCounterBySubnetwork(edgeCounts,betaGroups,1, 2, 3)[[1]]
outgoingEdgesLevel<-edgeCounterBySubnetwork(edgeCounts,betaGroups,1, 2, 3)[[2]]
incomingEdgesSlope<-edgeCounterBySubnetwork(edgeCounts,betaGroups,2, 1, 3)[[1]]
outgoingEdgesSlope<-edgeCounterBySubnetwork(edgeCounts,betaGroups,2, 1, 3)[[2]]
incomingEdgesCurvature<-edgeCounterBySubnetwork(edgeCounts,betaGroups,3, 1, 2)[[1]]
outgoingEdgesCurvature<-edgeCounterBySubnetwork(edgeCounts,betaGroups,3, 1, 2)[[2]]
allPotentialEdgesOuter<-factorial(nrow(edgeCounts))/
(factorial(2)*factorial(nrow(edgeCounts)-2))-3*
(factorial(nrow(edgeCounts[unlist(betaGroups[1]),unlist(betaGroups[1])]))/
(factorial(2)*factorial(nrow(edgeCounts[unlist(betaGroups[1]),unlist(betaGroups[1])])-2)))
allPotentialEdgesOuter
